(fun (append lst val) (
    let ((nlen (vec-len lst)) (newlst (make-vec (+ 1 nlen) val))) (block (
        loop (
            if (= (set! nlen (- nlen 1)) -1) (break newlst) (
                vec-set! newlst nlen (vec-get lst nlen)
            )
        )
    ))
))

(fun (addref node v) (
    vec-set! node 0 (append (vec-get node 0) v)
))

(let ((flag true) (x 0) (c (if (isnum input) input 10)) (out (vec (vec x))) ) (
    loop (if (> (set! x (+ x 1)) c) (break out) (
        if (set! flag (if flag false true)) (addref out x) (vec 1)
    ))
))

; (output "[[0, 2, 4, 6, 8, 10]]")
; ((input 11) (heap_size 18) (dynamic "out of memory"))
; ((input 11) (heap_size 19) (output "[[0, 2, 4, 6, 8, 10]]"))
; ((input 21) (heap_size 30) (dynamic "out of memory"))
; ((input 21) (heap_size 31) (output "[[0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20]]"))
; ((input 101) (heap_size 118) (dynamic "out of memory"))
; ((input 101) (heap_size 119) (output "[[0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100]]"))
