(fun (tag x) (vec-get x 0))
(fun (error) (block (print 999999999) (+ true true)))

(fun (var x) (vec 0 x))
(fun (lam x) (vec 1 x))
(fun (app x y) (vec 2 x y))
(fun (lit x) (vec 3 x))
(fun (inc x) (vec 4 x))

(fun (lam2 x) (lam (lam x)))
(fun (lam3 x) (lam (lam (lam x))))
(fun (app2 x y z) (app (app x y) z))
(fun (app3 x y z w) (app (app (app x y) z) w))

(fun (clos env body) (vec 0 env body))
(fun (number x) (vec 1 x))
(fun (thunk env exp) (vec 2 env exp))
(fun (ind x) (vec 3 x))

(fun (deref x)
  (loop
    (if (= (tag x) 3)
        (set! x (vec-get x 1))
        (break x))))

(fun (nth list n)
  (loop
    (if (= n 0)
        (break (vec-get list 0))
        (block
          (set! list (vec-get list 1))
          (set! n (sub1 n))))))


(fun (frame_halt) (vec 0))
(fun (frame_upd thunk k) (vec 1 thunk k))
(fun (frame_arg arg k) (vec 2 arg k))
(fun (frame_inc k) (vec 3 k))

(fun (eval e)
  (let ((env nil) (k (frame_halt)) (evaluated false))
    (loop
      (if evaluated
        (block
          (if (= (tag k) 0) (break e)
          (if (= (tag k) 1) (block
            (vec-set! (vec-get k 1) 0 3)
            (vec-set! (vec-get k 1) 1 e)
            (set! k (vec-get k 2)))
          (if (= (tag k) 2)
            (if (= (tag e) 0) (block
              (set! env (vec (vec-get k 1) (vec-get e 1)))
              (set! k (vec-get k 2))
              (set! e (vec-get e 2))
              (set! evaluated false))
            (error))
          (if (= (tag k) 3)
            (if (= (tag e) 1) (block
              (set! k (vec-get k 1))
              (set! e (number (add1 (vec-get e 1)))))
            (error))
          (error))))))
        (block
          (set! evaluated true)
          (set! e (if (= (tag e) 0)
                    (let ((e (deref (nth env (vec-get e 1)))))
                    (if (= (tag e) 2) (block
                      (set! evaluated false)
                      (set! k (frame_upd e k))
                      (set! env (vec-get e 1))
                      (vec-get e 2))
                      e))
                  (if (= (tag e) 1) (clos env (vec-get e 1))
                  (if (= (tag e) 2) (block
                    (set! evaluated false)
                    (set! k (frame_arg (thunk env (vec-get e 2)) k))
                    (vec-get e 1))
                  (if (= (tag e) 3) (number (vec-get e 1))
                  (if (= (tag e) 4) (block
                    (set! evaluated false)
                    (set! k (frame_inc k))
                    (vec-get e 1))
                  (error))))))))))))

(fun (from_church) (lam (app2 (var 0) (lam (inc (var 0))) (lit 0))))

(fun (subtraction)
  (let ((v0 (var 0)) (v1 (var 1)) (v2 (var 2)) (v3 (var 3))
        (k (lam2 v1)))
    (lam2 (lam2 (app3 v3
      (lam2 (app2 v0 (app v3 (app v1 k)) v1))
      (lam (app2 v0 v1 (lam v1)))
      (app2 v2 (lam3 (app v0 v2)) k))))))

(fun (to_church n)
  (let ((f (var 1)) (e (var 0)))
       (loop (if (= n 0) (break (lam2 e))
             (block (set! e (app f e)) (set! n (sub1 n)))))))

(eval
  (let ((five (to_church 5))
        (big (app five five)))
  (app (from_church) (app2 (subtraction) big big))))

; (output "[1, 0]")
